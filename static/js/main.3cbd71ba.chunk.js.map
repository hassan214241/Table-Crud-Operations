{"version":3,"sources":["component/Task.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","empList","id","name","email","phone","city","MiniDrawer","classes","useTheme","React","useState","open","setOpen","data","setData","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","Drawer","paper","direction","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","title","columns","field","editable","onRowAdd","newRow","Promise","resolve","reject","updatedRows","Math","floor","random","setTimeout","onRowDelete","selectedRow","tableData","splice","onRowUpdate","updatedRow","oldRow","options","actionsColumnIndex","addRowPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3cbd71ba.chunk.js","sourcesContent":["\r\n\r\nimport MaterialTable from 'material-table'\r\nimport clsx from 'clsx';\r\nimport { createStyles, makeStyles, useTheme, Theme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\n\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\n\r\nimport ListIcon from '@material-ui/icons/List';\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\nconst empList = [\r\n    { id: 1, name: \"Hassan\", email: 'hassan@gmail.com', phone: 923046721523, city: \"Gojra\" },\r\n    { id: 2, name: \"Umar\", email: 'umar@gmail.com', phone: 923045866023, city: \"Lahore\" },\r\n    { id: 3, name: \"Sajjad\", email: 'sajjad342@gmail.com', phone: 923446625523, city: \"Faisalabad\" },\r\n    { id: 4, name: \"Shahbaz\", email: 'shahbaz@gmail.com', phone: 923157855546, city: \"Gojra\" },\r\n    { id: 5, name: \"Nabeel\", email: 'nabeel123@gmail.com', phone: 923455507035, city: \"Faisalabad\" },\r\n  ]\r\n  \r\n\r\nexport default function MiniDrawer() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [data, setData] = useState(empList)\r\n  const columns = [\r\n    { title: \"ID\", field: \"id\", editable: false },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Email\", field: \"email\" },\r\n    { title: \"Phone Number\", field: 'phone', },\r\n    { title: \"City\", field: \"city\", }\r\n  ]\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n          Table Crud Operations\r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {['Dashboard', 'User', 'Send email', 'News'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <DashboardIcon/> : <MenuBookIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['Menu', 'Trash', 'Logout'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <ListIcon /> : <GroupAddIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n     \r\n        <div >\r\n       <hr/>\r\n      {/* <h4 align=\"center\">Assignment</h4> */}\r\n      {/* <h4 align='center'>Material Table with CRUD operation</h4> */}\r\n      <MaterialTable\r\n        title=\"Students Data\"\r\n        data={data}\r\n        columns={columns}\r\n        editable={{\r\n          onRowAdd: (newRow) => new Promise((resolve, reject) => {\r\n            const updatedRows = [...data, { id: Math.floor(Math.random() * 100), ...newRow }]\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          }),\r\n          onRowDelete: selectedRow => new Promise((resolve, reject) => {\r\n            const index = selectedRow.tableData.id;\r\n            const updatedRows = [...data]\r\n            updatedRows.splice(index, 1)\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          }),\r\n          onRowUpdate:(updatedRow,oldRow)=>new Promise((resolve,reject)=>{\r\n            const index=oldRow.tableData.id;\r\n            const updatedRows=[...data]\r\n            updatedRows[index]=updatedRow\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          })\r\n\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\"\r\n        }}\r\n      />\r\n     \r\n    </div>\r\n    \r\n    <hr/>\r\n    \r\n    \r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css';\n// import Bar from \"./component/Bar\"\n// import Table from \"./component/Table\"\nimport MiniDrawer from \"./component/Task\"\n\n\n\n\nfunction App() {\nreturn (\n    <>\n    {/* <Bar/>\n   <Table/> */}\n\n   <MiniDrawer/>\n     \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}